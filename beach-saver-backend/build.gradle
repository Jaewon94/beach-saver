plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.portpolio'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	// =========================
	// Spring Boot 핵심 스타터
	// =========================
	implementation 'org.springframework.boot:spring-boot-starter-web' // 웹 MVC/REST API
	implementation 'org.springframework.boot:spring-boot-starter-validation' // Bean 검증(JSR-380)

	// =========================
	// 데이터베이스/ORM
	// =========================
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA/Hibernate ORM
	runtimeOnly 'com.mysql:mysql-connector-j' // MySQL 드라이버(런타임)
	implementation 'org.springframework.boot:spring-boot-starter-data-redis' // Redis 연동(Spring Data)
	implementation 'org.flywaydb:flyway-mysql' // Flyway DB 마이그레이션(MySQL)

	// =========================
	// 보안/인증
	// =========================
	implementation 'org.springframework.boot:spring-boot-starter-security' // Spring Security(인증/인가)

	// =========================
	// JWT (JJWT)
	// =========================
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5' // JWT 토큰 API
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5' // JWT 구현체(런타임)
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5' // JWT용 Jackson(런타임)

	// =========================
	// QueryDSL
	// =========================
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // QueryDSL JPA 지원
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta' // QueryDSL Q타입 생성용 APT
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // 어노테이션 표준(컴파일용)
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // JPA 어노테이션(컴파일용)

	// =========================
	// 개발 편의성/유틸리티
	// =========================
	compileOnly 'org.projectlombok:lombok' // 롬복(컴파일 전용)
	annotationProcessor 'org.projectlombok:lombok' // 롬복 어노테이션 프로세서
	developmentOnly 'org.springframework.boot:spring-boot-devtools' // 개발용 핫리로드

	// =========================
	// 테스트/문서화
	// =========================
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // 테스트 기본
	testImplementation 'org.springframework.security:spring-security-test' // 시큐리티 테스트
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // JUnit 플랫폼 런처(런타임)

	// =========================
	// 문서화
	// =========================
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0' // OpenAPI 3 + Swagger UI
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // REST Docs 문서화

	// =========================
	// 스프링 부트가 .env 파일을 자동으로 읽도록 설정
	// =========================
	implementation 'io.github.cdimascio:dotenv-java:3.2.0' // 환경변수 관리

}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

// QueryDSL이 생성하는 Q타입 소스코드의 출력 디렉토리 지정
// (엔티티별 Q클래스가 이 경로에 생성됨)
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

// 모든 JavaCompile 작업에 대해, annotation processor가 생성하는 소스코드의 출력 경로를 위에서 지정한 querydslDir로 설정
// (Q타입 소스가 이 디렉토리에 생성되어 IDE/컴파일에서 인식 가능)
tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory.set(querydslDir) // Q타입 소스가 이 디렉토리에 생성됨
}

// main 소스셋에 QueryDSL이 생성한 Q타입 소스코드 디렉토리를 추가
// → Q클래스가 컴파일/실행/IDE 자동완성에서 정상 인식됨
sourceSets {
	main.java.srcDirs += [ querydslDir ] // Q타입 소스도 main 소스셋에 포함
}

// clean 작업 시, QueryDSL이 생성한 소스코드 디렉토리도 함께 삭제
// → 빌드 클린시 Q타입 소스도 완전히 정리됨(불필요한 파일 잔존 방지)
clean.doLast {
	file(querydslDir).deleteDir() // Q타입 소스 디렉토리 삭제
}
