# ===================================================================
# [실무 요약]
# 이 파일이 테스트 환경에서만 적용되는 이유는 Gradle과 Spring Boot의 시스템적 약속 때문임.
#
# 1. Gradle은 'bootRun' 시 src/main/resources만, 'test'나 'build' 시 src/test/resources도 클래스패스에 포함함.
# 2. Spring Boot는 src/test/resources의 application.properties를 src/main/resources보다 우선 적용함.
#
# 즉, 테스트 실행 시 이 파일이 최우선으로 적용되고,
# 실제 서비스 실행(bootRun) 시에는 무시됨.
# (코드 수정 없이 환경별 설정 완벽 분리 가능)
# ===================================================================

# ===================================================================
# Spring Boot Test Environment Configuration
#
# 이 파일은 'gradlew build' 또는 'test' 실행 시에만 사용되는
# 자동화된 테스트 전용 설정 파일입니다.
# 실제 애플리케이션 실행(bootRun) 시에는 사용되지 않습니다.
# ===================================================================

## =================================
## 데이터베이스 설정 (For Test)
## =================================

# 테스트 시 사용할 DB의 URL입니다.
# 플레이스홀더(${...}) 대신 실제 값을 직접 입력하여 외부 .env 파일 의존성을 제거하고,
# 어떤 환경에서든 독립적으로 테스트가 실행될 수 있도록 보장합니다.
spring.datasource.url=jdbc:mysql://localhost:3306/beachsaver_dev?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true

# 테스트 DB 사용자 이름
spring.datasource.username=beachsaver_developer

# 테스트 DB 비밀번호
spring.datasource.password=beachsaver_developer

# JDBC 드라이버 클래스
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


## =================================
## JPA/Hibernate 설정 (For Test)
## =================================

# 테스트 실행 시, Entity 클래스를 기반으로 DB 스키마를 매번 새로 생성합니다.
# 이를 통해 각 테스트가 항상 깨끗하고 동일한 DB 상태에서 시작하여,
# 테스트의 격리성과 신뢰성을 확보합니다.
# (옵션: create-drop, update, validate, none)
spring.jpa.hibernate.ddl-auto=create

# 테스트 실행 중 발생하는 SQL 쿼리를 콘솔 로그로 보고 싶을 때 사용합니다.
# 테스트가 예상대로 동작하는지 SQL 레벨에서 디버깅할 때 유용합니다. (true/false)
spring.jpa.show-sql=true


## =================================
## Flyway 설정 (For Test)
## =================================

# 테스트 환경에서는 위 `ddl-auto=create` 옵션이 스키마를 자동으로 관리하므로,
# Flyway의 마이그레이션 기능은 비활성화합니다.
# 이렇게 하면 테스트 속도가 향상되고, 스키마 관리 주체가 명확해집니다.
spring.flyway.enabled=false